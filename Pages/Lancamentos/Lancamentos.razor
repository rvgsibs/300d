@page "/lancamentos"

@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient httpClient
@inject ISnackbar Snackbar






<MudTable Items="@dados.ListaItems" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Confirmar inclusão dos valores"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">

    <ToolBarContent>
        <MudText Typo="Typo.h5">Lançamentos</MudText>
        <MudSpacer />
        <MudPaper>
            <MudSelect @bind-Value="@MesSelecionado" Label="Selecione o mês" Variant="Variant.Outlined">
                <MudSelectItem Value="@("Janeiro")" />
                <MudSelectItem Value="@("Fevereiro")" />
                <MudSelectItem Value="@("Março")" />
                <MudSelectItem Value="@("Abril")" />
                <MudSelectItem Value="@("Maio")" />
                <MudSelectItem Value="@("Junho")" />
                <MudSelectItem Value="@("Julho")" />
                <MudSelectItem Value="@("Agosto")" />
                <MudSelectItem Value="@("Setembro")" />
                <MudSelectItem Value="@("Outubro")" />
                <MudSelectItem Value="@("Novembro")" />
                <MudSelectItem Value="@("Dezembro")" />
            </MudSelect>
           


           @*  <MudMenu Label="@descricaoMes" MaxHeight="200" Variant="Variant.Filled" Color="Color.Primary" FullWidth="false">
                <MudMenuItem OnClick="@(() => SelecionarMes(1, "Janeiro"))">Janeiro</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(2, "Fevereiro"))">Fevereiro</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(3, "Março"))">Março</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(4, "Abril"))">Abril</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(5, "Maio"))">Maio</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(6, "Junho"))">Junho</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(7, "Julho"))">Julho</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(8, "Agosto"))">Agosto</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(9, "Setembro"))">Setembro</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(10, "Outubro"))">Outubro</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(11, "Novembro"))">Novembro</MudMenuItem>
                <MudMenuItem OnClick="@(() => SelecionarMes(12, "Dezembro"))">Dezembro</MudMenuItem>
            </MudMenu> *@
        </MudPaper>
    </ToolBarContent>
   @*  <ColGroup>
        <col style="width:10%;" />
        <col style="width:30%;" />
        <col style="width:30%;" />
        <col style="width:30%;" />
    </ColGroup> *@
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Items, object>(x=>x.Dia)">Dia</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Items, object>(x=>x.VendasComNota)">Vendas com nota</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Items, object>(x=>x.VendasSemNota)">Vendas sem nota</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Items, object>(x=>x.TotalDia)">Total</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Dia">@context.Dia</MudTd>
        <MudTd DataLabel="Vendas com nota">@context.VendasComNota</MudTd>
        <MudTd DataLabel="Vendas sem nota">@context.VendasSemNota</MudTd>
        <MudTd DataLabel="Total dia">@context.TotalDia</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Dia">@context.Dia</MudTd>
        <MudTd DataLabel="Vendas com nota">
            <MudTextField @bind-Value="@context.VendasComNota" />
        </MudTd>
        <MudTd DataLabel="Vendas sem nota">
            <MudTextField @bind-Value="@context.VendasSemNota" />
        </MudTd>
        <MudTd DataLabel="Total dia">@context.TotalDia</MudTd>
       
    </RowEditingTemplate>
    @* <PagerContent>
        <MudTablePager />
    </PagerContent> *@
    @* <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent> *@
</MudTable>


@code {
    int activeIndex = 0;
    Dados dados = new();
    string descricaoMes = "Selecione mês";

    List<Mes> listMes = new();
    string MesSelecionado = "Selecione mês";


    private bool _hidePosition;
    private bool _loading;

    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private Items selectedItem1 = null;
    private Items elementBeforeEdit;
    private HashSet<Items> selectedItems1 = new HashSet<Items>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<Items> Elements = new List<Items>();

    protected override async Task OnInitializedAsync()
    {
        // Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");

        MontarObjeto();



    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Dia = ((Items)element).Dia,
                VendasComNota = ((Items)element).VendasComNota,
                VendasSemNota = ((Items)element).VendasSemNota,
                TotalDia = ((Items)element).TotalDia
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((Items)element).Dia}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((Items)element).Dia} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        // ((Items)element).Dia = elementBeforeEdit.Dia;
        // ((Items)element).ValorComNota = elementBeforeEdit.ValorComNota;
        // ((Items)element).ValorSemNota = elementBeforeEdit.ValorSemNota;
        // ((Items)element).TotalDia = elementBeforeEdit.TotalDia;
        // AddEditionEvent($"RowEditCancel event: Editing of Element {((Items)element).Dia} canceled");
    }

    private void SelecionarMes(int mes, string descricao)
    {
        var teste = mes;
        descricaoMes = descricao;
    }

    public void MontarObjeto()
    {
        var dataAtual = DateTime.Now;
        MontarMes();

        MesSelecionado = listMes.Where(x => x.Id == dataAtual.Month).FirstOrDefault().Descricao;

        dados.Ano = dataAtual.Year;

        for (int mes = 1; mes < 13; mes++)
        {
            dados.Mes = mes;
            dados.ListaItems = new();

            var primeiroDia = new DateTime(dados.Ano, mes, 1);
            DateTime ultimoDia = primeiroDia.AddMonths(1).AddDays(-1);

            for (int i = primeiroDia.Day; i <= ultimoDia.Day; i++)
            {
                dados.ListaItems.Add(new Items
                    {
                        Dia = i,
                    });
            }
        }

    }



    public void MontarMes()
    {
        listMes.Add(new Mes { Id = 1, Descricao = "Janeiro" });
        listMes.Add(new Mes { Id = 2, Descricao = "Fevereiro" });
        listMes.Add(new Mes { Id = 3, Descricao = "Março" });
        listMes.Add(new Mes { Id = 4, Descricao = "Abril" });
        listMes.Add(new Mes { Id = 5, Descricao = "Maio" });
        listMes.Add(new Mes { Id = 6, Descricao = "Junho" });
        listMes.Add(new Mes { Id = 7, Descricao = "Julho" });
        listMes.Add(new Mes { Id = 8, Descricao = "Agosto" });
        listMes.Add(new Mes { Id = 9, Descricao = "Setembro" });
        listMes.Add(new Mes { Id = 10, Descricao = "Outubro" });
        listMes.Add(new Mes { Id = 11, Descricao = "Novembro" });
        listMes.Add(new Mes { Id = 12, Descricao = "Dezembro" });
    }



    public class Mes
    {
        public int Id { get; set; }
        public string Descricao { get; set; }
    }




    public class Dados
    {
        public int Mes { get; set; }
        public int Ano { get; set; }
        public List<Items> ListaItems { get; set; }
    }

    public class Items
    {
        public int Dia { get; set; }
        public decimal? VendasComNota { get; set; }
        public decimal? VendasSemNota { get; set; }
        public decimal? TotalDia { get; set; }
    }
}


